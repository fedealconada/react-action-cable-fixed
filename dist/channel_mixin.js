var ChannelMixin,_capitalize;_capitalize=require("lodash.capitalize"),ChannelMixin=function(){var n;return n=Array.prototype.slice.call(arguments),{componentDidMount:function(){var e,t,i,l,h,c,a;for(i=this.props.cable||this.context.cable,this.mounted=!0,a=[],h=0,c=n.length;h<c;h++)l=n[h],i.channel(l)?(null!=this.handleConnected&&i.channel(l).on("connected",this.handleConnected),null!=this.handleDisconnected&&i.channel(l).on("disconnected",this.handleDisconnected),null!=this.handleDisconnected&&i.channel(l).on("rejected",this.handleDisconnected),null!=this.handleReceived&&i.channel(l).on("received",this.handleReceived),a.push(function(){var n,h,c,a;for(c=i.channel(l).actions,a=[],n=0,h=c.length;n<h;n++)e=c[n],t="handle"+_capitalize(e),null!=this[t]?a.push(i.channel(l).on(e,this[t])):a.push(void 0);return a}.call(this))):a.push(void 0);return a},componentWillUnmount:function(){var e,t,i,l,h,c,a;for(i=this.props.cable||this.context.cable,this.mounted=!1,a=[],h=0,c=n.length;h<c;h++)l=n[h],i.channel(l)?(null!=this.handleConnected&&i.channel(l).removeListener("connected",this.handleConnected),null!=this.handleDisconnected&&i.channel(l).removeListener("disconnected",this.handleDisconnected),null!=this.handleDisconnected&&i.channel(l).removeListener("rejected",this.handleDisconnected),null!=this.handleReceived&&i.channel(l).removeListener("received",this.handleReceived),a.push(function(){var n,h,c,a;for(c=i.channel(l).actions,a=[],n=0,h=c.length;n<h;n++)e=c[n],t="handle"+_capitalize(e),null!=this[t]?a.push(i.channel(l).removeListener(e,this[t])):a.push(void 0);return a}.call(this))):a.push(void 0);return a},perform:function(n,e,t){var i;return null==t&&(t={}),i=this.props.cable||this.context.cable,i.channel(n).perform(e,t)}}},ChannelMixin.componentWillMount=function(){throw new Error('ActionCableReact.ChannelMixin is a function that takes one or more store names as parameters and returns the mixin, e.g.: mixins: [ActionCableReact.ChannelMixin("Channel1", "Channel2")]')},module.exports=ChannelMixin;